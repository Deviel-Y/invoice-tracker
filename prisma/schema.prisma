generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int       @id @default(autoincrement())
  productName       String
  quantity          Int
  pricePerEach      Int
  unit              Unit
  productTotalPrice Int
  invoices          Invoice[]
}

enum Unit {
  meter
  branch
  piece
}

model Invoice {
  id                 String    @id @default(cuid())
  invoiceNumber      Int       @unique
  invoiceDescription String    @db.Text
  companyName        String
  invoiceTotalPrice  Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  products           Product[]
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String?         @unique
  email          String?         @unique
  emailVerified  DateTime?
  hashedPassword String
  role           Role?           @default(USER)
  image          String?
  Session        Session[]
  Account        Account?
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
